name: Release Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dark-server
            asset_name: dark-server-v${{ github.event.release.tag_name || github.event.inputs.tag }}-linux-x64
            archive_cmd: tar -czf
            archive_ext: tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dark-server
            asset_name: dark-server-v${{ github.event.release.tag_name || github.event.inputs.tag }}-linux-arm64
            archive_cmd: tar -czf
            archive_ext: tar.gz
            
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dark-server
            asset_name: dark-server-v${{ github.event.release.tag_name || github.event.inputs.tag }}-macos-x64
            archive_cmd: tar -czf
            archive_ext: tar.gz
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dark-server
            asset_name: dark-server-v${{ github.event.release.tag_name || github.event.inputs.tag }}-macos-arm64
            archive_cmd: tar -czf
            archive_ext: tar.gz
            
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dark-server.exe
            asset_name: dark-server-v${{ github.event.release.tag_name || github.event.inputs.tag }}-windows-x64
            archive_cmd: 7z a
            archive_ext: zip
            
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: dark-server.exe
            asset_name: dark-server-v${{ github.event.release.tag_name || github.event.inputs.tag }}-windows-arm64
            archive_cmd: 7z a
            archive_ext: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation dependencies (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Strip binary (Unix)
      if: runner.os != 'Windows'
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        else
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        fi
        
    - name: Create release directory
      run: |
        mkdir -p release-assets
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-assets/
        
    - name: Add README and LICENSE to release
      run: |
        cp README.md release-assets/ 2>/dev/null || echo "README.md not found"
        cp LICENSE release-assets/ 2>/dev/null || echo "LICENSE not found"
        cp CHANGELOG.md release-assets/ 2>/dev/null || echo "CHANGELOG.md not found"
        
    - name: Create archive (Unix)
      if: runner.os != 'Windows'
      run: |
        cd release-assets
        ${{ matrix.archive_cmd }} ../${{ matrix.asset_name }}.${{ matrix.archive_ext }} *
        
    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd release-assets
        ${{ matrix.archive_cmd }} ../${{ matrix.asset_name }}.${{ matrix.archive_ext }} *
        
    - name: Upload release asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag }}
        files: ${{ matrix.asset_name }}.${{ matrix.archive_ext }}
        body: |
          ## Dark Server ${{ github.event.release.tag_name || github.event.inputs.tag }}
          
          High-performance HTTP-to-WebSocket proxy server written in Rust.
          
          ### Platform Support
          This release includes binaries for:
          - Linux (x64, ARM64)
          - macOS (Intel x64, Apple Silicon ARM64)  
          - Windows (x64, ARM64)
          
          ### Quick Start
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Run: `./dark-server` (Unix) or `dark-server.exe` (Windows)
          
          Default ports:
          - HTTP: http://localhost:8889
          - WebSocket: ws://localhost:9998
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-checksums:
    name: Create Checksums
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download release assets
      uses: robinraju/release-downloader@v1.8
      with:
        tag: ${{ github.event.release.tag_name }}
        fileName: "dark-server-v${{ github.event.release.tag_name }}-*"
        
    - name: Generate checksums
      run: |
        sha256sum dark-server-v${{ github.event.release.tag_name }}-* > checksums.txt
        
    - name: Upload checksums
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.release.tag_name }}
        files: checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
