name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Run integration tests
      run: cargo test --test integration_test --verbose

  build:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dark-server
            asset_name: dark-server-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dark-server
            asset_name: dark-server-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dark-server.exe
            asset_name: dark-server-windows-x64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: dark-server.exe
            asset_name: dark-server-windows-arm64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dark-server
            asset_name: dark-server-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dark-server
            asset_name: dark-server-macos-arm64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: contains(matrix.target, 'aarch64') && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Configure cross-compilation
      if: contains(matrix.target, 'aarch64-unknown-linux-gnu')
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        else
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  release:
    name: Create Release
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release archives
      run: |
        # Linux x64
        tar -czf dark-server-linux-x64.tar.gz -C dark-server-linux-x64 .

        # Linux ARM64
        tar -czf dark-server-linux-arm64.tar.gz -C dark-server-linux-arm64 .

        # macOS x64
        tar -czf dark-server-macos-x64.tar.gz -C dark-server-macos-x64 .

        # macOS ARM64 (Apple Silicon)
        tar -czf dark-server-macos-arm64.tar.gz -C dark-server-macos-arm64 .

        # Windows x64
        cd dark-server-windows-x64.exe
        zip ../dark-server-windows-x64.zip *
        cd ..

        # Windows ARM64
        cd dark-server-windows-arm64.exe
        zip ../dark-server-windows-arm64.zip *
        cd ..

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dark-server-linux-x64.tar.gz
          dark-server-linux-arm64.tar.gz
          dark-server-macos-x64.tar.gz
          dark-server-macos-arm64.tar.gz
          dark-server-windows-x64.zip
          dark-server-windows-arm64.zip
        body: |
          ## Dark Server v${{ github.ref_name }}

          High-performance HTTP-to-WebSocket proxy server written in Rust.

          ### Downloads

          #### Linux
          - **x64**: `dark-server-linux-x64.tar.gz`
          - **ARM64**: `dark-server-linux-arm64.tar.gz`

          #### macOS
          - **Intel (x64)**: `dark-server-macos-x64.tar.gz`
          - **Apple Silicon (ARM64)**: `dark-server-macos-arm64.tar.gz`

          #### Windows
          - **x64**: `dark-server-windows-x64.zip`
          - **ARM64**: `dark-server-windows-arm64.zip`

          ### Installation
          1. Download the appropriate binary for your platform and architecture
          2. Extract the archive
          3. Run the binary: `./dark-server` (Linux/macOS) or `dark-server.exe` (Windows)

          ### Configuration
          - HTTP Server: `http://localhost:8889`
          - WebSocket Server: `ws://localhost:9998`

          See [README.md](https://github.com/stevessr/dark-server/blob/main/README.md) for detailed usage instructions.

          ### Changes
          See [CHANGELOG.md](https://github.com/stevessr/dark-server/blob/main/CHANGELOG.md) for detailed changes.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name == 'release'
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: darkserver/dark-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
